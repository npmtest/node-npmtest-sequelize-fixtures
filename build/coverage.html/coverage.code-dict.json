{"/home/travis/build/npmtest/node-npmtest-sequelize-fixtures/test.js":"/* istanbul instrument in package npmtest_sequelize_fixtures */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - init-before\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - init-after\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - init-after\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - init-after\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-sequelize-fixtures/lib.npmtest_sequelize_fixtures.js":"/* istanbul instrument in package npmtest_sequelize_fixtures */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - init-before\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_sequelize_fixtures = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_sequelize_fixtures = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-sequelize-fixtures/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-sequelize-fixtures && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_sequelize_fixtures */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - init-before\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_sequelize_fixtures\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // init-after\n    // run browser js-env code - init-after\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - init-after\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_sequelize_fixtures.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_sequelize_fixtures.rollup.js'] =\n            local.assetsDict['/assets.npmtest_sequelize_fixtures.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_sequelize_fixtures.__dirname + '/lib.npmtest_sequelize_fixtures.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-sequelize-fixtures/node_modules/sequelize-fixtures/index.js":"var Loader = require('./lib/loader'),\n    Reader = require('./lib/reader');\n\nfunction initopts(options){\n    options = options || {};\n    options.encoding = options.encoding || 'utf8';\n    options.log = options.log || console.log;\n    return options;\n}\n\nfunction wrap(fn) {\n    return function() {\n        if (arguments.length < 2) {\n            throw new Error('Insufficient arguments');\n        } else {\n            var fixtures = arguments[0], models = arguments[1], options, i, cb, promise;\n            for(i = 2; i < arguments.length; i++) {\n                if (typeof arguments[i] === 'object') options = arguments[i];\n                else if (typeof arguments[i] === 'function') cb = arguments[i];\n            }\n            promise = fn(fixtures, models, initopts(options));\n            if (cb) {\n                console.warn(\"Sequelize-fixtures: callback arguments are deprecated, please use returned promises.\");\n                promise.then(function () {\n                    cb();\n                }, function (err) {\n                    cb(err);\n                }).catch(function (err){\n                    cb(err);\n                });\n            }\n            return promise;\n        }\n    };\n}\n\nexports.loadFixture = wrap(function(fixture, models, options) {\n    var loader = new Loader(options);\n    return loader.loadFixture(fixture, models);\n});\n\nexports.loadFixtures = wrap(function(fixtures, models, options) {\n    var loader = new Loader(options);\n    return loader.loadFixtures(fixtures, models);\n});\n\nexports.loadFile = wrap(function(filename, models, options) {\n    var loader = new Loader(options), reader = new Reader(options);\n    return reader.readFileGlob(filename).then(function(fixtures) {\n        return loader.loadFixtures(fixtures, models);\n    });\n});\n\nexports.loadFiles = wrap(function(filenames, models, options) {\n    var loader = new Loader(options), reader = new Reader(options);\n    return reader.readFiles(filenames).then(function(fixtures){\n        return loader.loadFixtures(fixtures, models);\n    });\n});\n","/home/travis/build/npmtest/node-npmtest-sequelize-fixtures/node_modules/sequelize-fixtures/lib/loader.js":"var Promise = require('bluebird');\nvar objectAssign = require('object-assign');\n\nvar Loader = module.exports = function(options) {\n    this.options = options;\n    this.saved = 0;\n    this.skipped = 0;\n};\n\nLoader.prototype.loadFixtures = function(fixtures, models) {\n    return Promise.each(fixtures, function(fixture) {\n        return this.loadFixture(fixture, models);\n    }.bind(this)).then(function() {\n        return Promise.resolve(this.saved);\n    }.bind(this));\n};\n\nLoader.prototype.loadFixture = function(fixture, models) {\n    var buildOptions = fixture.buildOptions,\n        saveOptions = fixture.saveOptions,\n        onError = function(err) {\n            if (err instanceof Error) {\n                throw err;\n            } else {\n                throw new Error(JSON.stringify(err));\n            }\n        };\n\n    if (typeof fixture !== 'object') throw new Error('expected fixture to be object, is ' + (typeof fixture));\n    else if (!fixture.model) throw new Error('model for a fixture is undefined');\n    else if (!fixture.data) throw new Error('data undefined for fixture');\n\n    var Model = models[fixture.model],\n        self = this;\n\n    if (!Model) {\n        throw new Error('Model not found: ' + fixture.model);\n    } else if (typeof Model === 'function') {\n        throw new Error('models.' + fixture.model + ' appears to be a function. Perhaps you are importing model factory function? You should then use sequelize.import to create your model, see https://github.com/sequelize/express-example/blob/master/models/index.js#L17');\n    } else if (!Model.findOne) {\n        throw new Error('models.' + fixture.model + ' is not a sequelize model.');\n    }\n\n    return this.prepFixtureData(fixture.data, Model).spread(function(data, many2many) {\n        var setManyToMany = function(instance) {\n            //set many2many assocs if there are any\n            var promises = [];\n\n            if (Object.keys(many2many).length) {\n                //each assoc\n                Object.keys(many2many).forEach(function(key) {\n                    var assoc = Model.associations[key];\n\n                    //each associated instance\n                    many2many[key].forEach(function(relinst) {\n\n                        //make options object with transaction if any, through table attrs if any\n                        var options = objectAssign({},\n                            self.options.transaction ? {transaction: self.options.transaction} : {},\n                            relinst._through || {});\n\n                        //and add related instance\n                        promises.push(instance[assoc.accessors.add](relinst.instance, options));\n                    });\n                });\n            }\n\n            return Promise.all(promises);\n        };\n\n        var where = {};\n        Object.keys(Model.rawAttributes).forEach(function(k) {\n            var fieldType = Model.rawAttributes[k].type.constructor.key;\n            if (data.hasOwnProperty(k) && (!fixture.keys || fixture.keys.indexOf(k) !== -1) && fieldType !== 'GEOMETRY' && fieldType !== 'VIRTUAL') {\n                //postgres \n                if (fieldType === 'JSONB') {\n                    where[k] = {\n                        $contains: data[k]\n                    };\n                } else if (Model.rawAttributes[k].hasOwnProperty('set')) {\n                    var val = null;\n                    Model.setDataValue = function(name, value) {\n                        val = value;\n                    }\n                    // The model has set defined so it may do some conversion of the data\n                    // (e.g. serializing a JSON blob.)\n                    Model.rawAttributes[k].set.call(Model, data[k]);\n\n                    // don't include VIRTUAL column in filter condition\n                    where[k] = val;\n                } else {\n                    where[k] = data[k];\n                }\n            }\n        });\n\n        var findOptions = {where: where};\n        if (self.options.transaction) {\n            findOptions.transaction = self.options.transaction;\n        }\n\n        return Model.find(findOptions).then(function(instance) {\n            if (instance) {\n                self.skipped++;\n                return setManyToMany(instance);\n            }\n\n            if (self.options.transaction) {\n                if (!saveOptions) {\n                    saveOptions = {};\n                }\n                saveOptions.transaction = self.options.transaction;\n            }\n\n            return Model\n                .build(data, buildOptions)\n                .save(saveOptions).then(function(instance) {\n                    if (instance) {\n                        self.saved++;\n                        return setManyToMany(instance);\n                    }\n                });\n        });\n    });\n};\n\nLoader.prototype.prepFixtureData = function(data, Model) {\n    var self = this,\n        result = {},\n        promises = [],\n        many2many = {};\n\n    // Allows an external caller to modify the data\n    // before it is evaluated\n    if (this.options.modifyFixtureDataFn) {\n        data = this.options.modifyFixtureDataFn(data, Model);\n    }\n\n    // Allows an external caller to do some transforms to the data\n    // before it is saved\n    if (this.options.transformFixtureDataFn) {\n        result = this.options.transformFixtureDataFn(data, Model);\n    }\n\n    Object.keys(data).forEach(function(key) {\n        var foundInThroughName = null;\n        // For Sequelize < 3.0.0 compatibility (using for instance \"actorsmovies\" instead of \"actors\" or \"movies\")\n        Object.keys(Model.associations).forEach(function(assoc_name) {\n            if(Model.associations[assoc_name].options && (Model.associations[assoc_name].options.through == key || Model.associations[assoc_name].options.as == key)) {\n                return foundInThroughName = assoc_name;\n            }\n        });\n        var assoc = Model.associations[foundInThroughName || key],\n            val = data[key];\n\n        if (assoc) {\n            if (assoc.associationType === 'BelongsTo') {\n                var where = {};\n                where[assoc.target.primaryKeyField] = val;\n\n                var options = typeof val === 'object' ? { where: val } : { where: where };\n                if (self.options.transaction)\n                    options.transaction = self.options.transaction;\n\n                promises.push(\n                    (typeof val === 'object' ?  assoc.target.find(options) : assoc.target.findOne(options))\n                    .then(function(obj) {\n                        result[assoc.identifier] = obj[assoc.target.primaryKeyField || 'id'];\n                        return Promise.resolve();\n                    })\n                );\n            } else if (assoc.associationType === 'HasMany' || assoc.associationType === 'BelongsToMany') {\n\n                if (Array.isArray(val)) {\n                    many2many[assoc.associationAccessor] = [];\n                    val.forEach(function(v) {\n\n                        var options  = {},\n                            where,\n                            _through = null;\n\n                        //find by fields\n                        if (typeof v === 'object') {\n                            where = objectAssign({}, v);\n                            if (where._through) {\n                                _through = where._through;\n                                delete where._through;\n                            }\n\n                        //find by id\n                        } else {\n                            where = {};\n                            where[assoc.target.primaryKeyField] = v;\n                        }\n\n                        options.where = where;\n\n                        if (self.options.transaction) {\n                            options.transaction = self.options.transaction;\n                        }\n\n                        promises.push(\n                            (typeof v === 'object' ?  assoc.target.find(options) : assoc.target.findOne(options))\n                            .then(function(obj) {\n                                many2many[assoc.associationAccessor].push({\n                                    instance: obj,\n                                    _through: _through\n                                });\n                                return Promise.resolve();\n                            })\n                        );\n                    });\n                } else {\n                    throw new Error('HasMany associations must be arrays of where clauses');\n                }\n            } else {\n                throw new Error('Only BelongsTo & HasMany associations are supported');\n            }\n\n        } else {\n            if (Model.attributes.hasOwnProperty(key)) {\n                result[key] = val;\n            } else {\n                console.warn('attribute \"' + key +\"' not defined on  model '\" + Model.name + \"'.\");\n            }\n        }\n    });\n\n    return Promise.all(promises).then(function() {\n        return [result, many2many];\n    });\n};\n","/home/travis/build/npmtest/node-npmtest-sequelize-fixtures/node_modules/sequelize-fixtures/lib/reader.js":"var Promise = require('bluebird'),\n    path    = require('path'),\n    yaml    = require('js-yaml'),\n    glob    = Promise.promisify(require('glob')),\n    fs      = Promise.promisifyAll(require('fs'));\n\nvar Reader = module.exports = function (options) {\n    options.encoding = options.encoding || 'utf8';\n    this.options = options;\n};\n\nvar PARSERS = Reader.PARSERS = {\n    '.json': JSON.parse,\n    '.yml': yaml.safeLoad,\n    '.yaml': yaml.safeLoad\n};\n\nReader.prototype.readFile = Promise.method(function(filename) {\n    this.options.log('Fixtures: reading file ' + filename + '...');\n    var ext = path.extname(filename).toLowerCase();\n\n    if (ext === '.js') {\n        return require(path.resolve(process.cwd(), filename));\n    } else {\n        if (!PARSERS[ext]) {\n            throw new Error('unknown file type: ', ext);\n        }\n        return fs.readFileAsync(filename, this.options.encoding).then(function(data) {\n            var fixtures = PARSERS[ext](data);\n            if (fixtures.fixtures) fixtures = fixtures.fixtures;\n            return fixtures;\n        });\n    }\n});\n\nReader.prototype.readFileGlob = function(globpath){\n    var self = this, result = [];\n    return glob(globpath).then(function(filenames) {\n        if (!filenames.length) {\n            throw new Error(\"No files matching '\" + globpath + \"' found.\");\n        }\n        return Promise.each(filenames, function(filename) {\n            return self.readFile(filename).then(function(res) {\n                result = result.concat(res);\n            });\n        }).then(function() {\n            return result;\n        });\n    });\n};\n\nReader.prototype.readFiles = function(filenames){\n    var self = this, result = [];\n    return Promise.each(filenames, function(filename) {\n        return self.readFileGlob(filename).then(function(res) {\n            result = result.concat(res);\n        });\n    }).then(function() {\n        return result;\n    });\n};\n","/home/travis/build/npmtest/node-npmtest-sequelize-fixtures/node_modules/sequelize-fixtures/Gruntfile.js":"module.exports = function(grunt){\n    grunt.loadTasks('tasks');\n};"}